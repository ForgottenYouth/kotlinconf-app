import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

def ideaActive = System.getProperty("idea.active") == "true"

apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"

kotlin {
    targets {
        fromPreset(presets.jvm, "jvm")
        if (ideaActive) {
            fromPreset(presets.iosX64, 'ios')
        }
    }

    def iosArm32 = iosArm32("iosArm32")
    def iosArm64 = iosArm64("iosArm64")
    def iosX64 = iosX64("iosX64")

    def frameworkName = "KotlinConfAPI"

    configure([iosArm32, iosArm64, iosX64]) {
        binaries.framework {
            baseName = frameworkName
        }
    }

    task debugFatFramework(type: FatFrameworkTask) {
        baseName = frameworkName
        from iosArm64.binaries.getFramework("DEBUG")//, iosArm64.binaries.getFramework("DEBUG"),*/ iosX64.binaries.getFramework("DEBUG")

//        destinationDir = buildDir.resolve("fat-framework/debug")

        group = "Universal framework"
        description = "Builds a universal (fat) debug framework"
    }

    task releaseFatFramework(type: FatFrameworkTask) {
        baseName = frameworkName
        from iosArm32.binaries.getFramework("RELEASE"), iosArm64.binaries.getFramework("RELEASE"), iosX64.binaries.getFramework("RELEASE")
//        destinationDir = buildDir.resolve("fat-framework/release")
        group = "Universal framework"
        description = "Builds a universal (fat) release framework"
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            }
        }

        configure([iosArm32Main, iosArm64Main, iosX64Main]) {
            dependsOn iosMain
        }
    }
}
